version: 2.1

executors:
  honeybadger_ci:
    docker:
      - image: 0xd00d2bad/honeybadger_ci:latest
    working_directory: ~/honeybadger_ci

jobs:
  build:
    executor: honeybadger_ci
    working_directory: ~/honeybadger_ci
    steps:
      - checkout
      - attach_workspace:
          at: ~/honeybadger_ci
      - run:
          name: "Configure"
          command: |
            cmake -Bbuild -G Ninja -DCMAKE_BUILD_TYPE=Release
      - run:
          name: "Build"
          command: |
            cmake --build build
      - persist_to_workspace:
          root: ~/honeybadger_ci
          paths:
            - ./build
  test:
    executor: honeybadger_ci
    working_directory: ~/honeybadger_ci_test
    steps:
      - attach_workspace:
          at: ~/honeybadger_ci_test
      - run:
          name: "Build and test"
          command: |
            ctest --build-and-test . build --build-generator Ninja  --output-junit result --test-command ctest --no-compress-output -T Test --output-junit Testing/results.xml
      - store_test_results:
          path: build/Testing
      - persist_to_workspace:
          root: ~/honeybadger_ci_test
          paths:
            - .

  static_analysis:
    executor: honeybadger_ci
    working_directory: ~/honeybadger_ci_test
    steps:
      - attach_workspace:
          at: ~/honeybadger_ci_test
      - run:
          name: "Build"
          command: |
            ls -la
            ctest --build-and-test . build --build-generator Ninja  --output-junit result --test-command ctest --no-compress-output -T Test --output-junit Testing/results.xml
      - run:
          name: "gcov"
          command: |
            - sh ./generate_gcov.sh
      - run:
          name: "Run sonar scanner"
          command: |
            sonar-scanner -Dsonar.login=$SONAR_TOKEN

  deploy:
    executor: honeybadger_ci
    working_directory: ~/honeybadger_ci
    steps:
      - attach_workspace:
          at: ~/honeybadger_ci
      - run: |
          cd build
          ls -la
      - run: cmake --version

workflows:
  cicd:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test