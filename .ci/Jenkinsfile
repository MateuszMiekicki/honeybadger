pipeline {
    // agent any
    agent {
        dockerfile {
            filename 'Dockerfile'
            dir '.ci'
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        booleanParam name: 'RUN_TESTS', defaultValue: true, description: 'Run Tests?'
        booleanParam name: 'RUN_ANALYSIS', defaultValue: true, description: 'Run Static Code Analysis?'
        booleanParam name: 'DEPLOY', defaultValue: true, description: 'Deploy Artifacts?'
    }

    // stages {
    //     stage('Example Stage') {
    //         parallel {
    //             stage('Stage 1') {
    //                 steps {
    //                     sh 'gcc --version'
    //                 }
    //             }

    //             stage('Stage 2') {
    //                 steps {
    //                     sh 'cmake --version'
    //                 }
    //             }

    //             stage('Stage 3') {
    //                 steps {
    //                     sh 'ls -a'
    //                     sh 'echo stage 3 passed'
    //                 }
    //             }
    //         }
    //     }

    // }

    stages {
        stage('Build') {
            steps {
                dir('build') {
                    sh 'cmake .. -G Ninja -D CMAKE_BUILD_TYPE=Release'
                    sh 'cmake --build . --config Release --clean-first --target all --parallel 14'
                }
            }
        }

        stage('Test') {
            when {
                environment name: 'RUN_TESTS', value: 'true'
            }
            steps {
                dir('build') {
                    sh 'ctest --parallel 14 --build-config Release --test-action test --output-on-failure --no-compress-output'
                }
            }
        }

        stage('Analyse') {
            when {
                environment name: 'RUN_ANALYSIS', value: 'true'
            }
            steps {
                echo 'RUN_ANALYSIS'
            }
        }

        stage('Deploy') {
            when {
                environment name: 'DEPLOY', value: 'true'
            }
            steps {
                echo 'DEPLOY'
            }
        }
    }
    post {
        always {
            deleteDir()
            echo "${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) (${GIT_COMMIT})"
        }
        // failure {
        //     mail to: 'nxjzuignevhqestmte@sdvgeft.com',
        //         subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        //         body: "Something is wrong with ${env.BUILD_URL}"
        // }
    }
}


// def notifySuccessful() {
//     slackSend (
//         color: '#00FF00',
//         message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

//     hipchatSend (
//         color: 'GREEN',
//         notify: true,
//         message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
//         )

//     emailext (
//         subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
//         body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
//             <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
//         recipientProviders: [[$class: 'DevelopersRecipientProvider']]
//         )
// }