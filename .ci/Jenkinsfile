pipeline {
    // agent any
    agent {
        dockerfile {
            filename 'Dockerfile'
            dir '.ci'
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        booleanParam name: 'RUN_TESTS', defaultValue: true, description: 'Run Tests?'
        booleanParam name: 'RUN_ANALYSIS', defaultValue: true, description: 'Run Static Code Analysis?'
        booleanParam name: 'DEPLOY', defaultValue: true, description: 'Deploy Artifacts?'
    }

    // stages {
    //     stage('Example Stage') {
    //         parallel {
    //             stage('Stage 1') {
    //                 steps {
    //                     sh 'gcc --version'
    //                 }
    //             }

    //             stage('Stage 2') {
    //                 steps {
    //                     sh 'cmake --version'
    //                 }
    //             }

    //             stage('Stage 3') {
    //                 steps {
    //                     sh 'ls -a'
    //                     sh 'echo stage 3 passed'
    //                 }
    //             }
    //         }
    //     }

    // }

    stages {
        stage('Setup') {
            steps {
                dir ('build') {
                    deleteDir()
                }
            }
        }

        stage('Build') {
            steps {
                dir('build') {
                    sh 'cmake .. -G Ninja -D CMAKE_BUILD_TYPE=Release'
                    sh 'cmake --build . --config Release --clean-first --target all --parallel 14'
                }
            }
        }

        stage('Test') {
            when {
                environment name: 'RUN_TESTS', value: 'true'
            }
            steps {
                // sh 'ls'
                // sh 'cd build && ls -a && cd bin && ls'
                // sh './ocr_test'
                sh 'cd build && ctest --parallel 14 -C Release -T test --output-on-failure --test-dir ./build'
            }
        }

        stage('Analyse') {
            when {
                environment name: 'RUN_ANALYSIS', value: 'true'
            }
            steps {
                sh label: '', returnStatus: true, script: 'cppcheck . --xml --language=c++ --suppressions-list=suppressions.txt 2> cppcheck-result.xml'
                publishCppcheck allowNoReport: true, ignoreBlankFiles: true, pattern: '**/cppcheck-result.xml'
            }
        }

        stage('Deploy') {
            when {
                environment name: 'DEPLOY', value: 'true'
            }
            steps {
                sh label: '', returnStatus: true, script: '''cp jenkinsexample ~
                cp test/testPro ~'''
            }
        }
    }
}